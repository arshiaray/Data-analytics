-- see all the tables in the bike store schema
SHOW TABLES FROM bike_store;

-- 1. What is the total revenue generated by the store?
SELECT SUM(list_price * quantity * (1 - discount)) AS total_revenue
FROM order_items;

-- 2. Which product category generates the most revenue and the quantity sold of each category?
SELECT categories.category_name, 
	   SUM(order_items.quantity * order_items.list_price *(1-order_items.discount)) AS total_revenue,
	   SUM(order_items.quantity) AS quantity_sold
FROM order_items
INNER JOIN products ON order_items.product_id = products.product_id
INNER JOIN categories ON products.category_id = categories.category_id
GROUP by categories.category_name
ORDER BY total_revenue DESC;

-- 3. Which brand has the highest total sales?
SELECT brands.brand_name,
		SUM(order_items.quantity) AS quantity_sold
FROM order_items
INNER JOIN products ON order_items.product_id = products.product_id
INNER JOIN brands ON products.brand_id = brands.brand_id
GROUP BY brands.brand_name
ORDER BY quantity_sold DESC;

-- 4. What is the average order value?
SELECT AVG(quantity * list_price * (1-discount)) AS avg_order_value
FROM order_items;

-- 5. How have monthly sales trends changed over time?
SELECT 
	YEAR (o.order_date) AS YEAR,
    MONTH( o.order_date) AS MONTH,
    SUM(oi.quantity * oi.list_price *(1-oi.discount)) AS total_revenue
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY year, month
ORDER BY year, month;

-- 6. Who are the top 10 highest spending customers?
SELECT c.customer_id,
	CONCAT(c.first_name,' ',c.last_name) AS customer_name,
    SUM(oi.quantity * oi.list_price *(1-oi.discount)) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY customer_id, customer_name
ORDER BY total_spent DESC
LIMIT 10;

-- 7. How many unique customers have placed orders?
SELECT COUNT(DISTINCT o.customer_id) AS unique_customers
FROM orders o;

-- 8. Which products are most frequently ordered?
SELECT p.product_name,
	SUM(oi.quantity) AS total_quantity_ordered
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_name
ORDER BY total_quantity_ordered DESC
LIMIT 10;

-- 9. Which city or state has the highest number of customers?
SELECT c.city,
	COUNT(DISTINCT c.customer_id) AS number_of_customers
FROM customers c
GROUP BY c.city
ORDER BY number_of_customers DESC
LIMIT 5;

-- 10. Which products have the highest and lowest stock levels?
	-- Highest:
SELECT p.product_name,
	SUM(s.quantity) AS product_quantity
FROM stocks s 
JOIN products p ON s.product_id = p.product_id
GROUP BY product_name
ORDER BY product_quantity DESC 
LIMIT 5;

-- Lowest:
SELECT p.product_name,
	SUM(s.quantity) AS product_quantity
FROM stocks s 
JOIN products p ON s.product_id = p.product_id
GROUP BY product_name
ORDER BY product_quantity ASC 
LIMIT 5;    

-- 11. What is the most frequently purchased product?
SELECT p.product_name,
	SUM(oi.quantity) AS total_quantity_ordered
FROM order_items oi 
JOIN products p ON oi.product_id = p.product_id
GROUP BY product_name
ORDER BY total_quantity_ordered DESC
LIMIT 5;

-- 12. How many products belong to each category?
SELECT c.category_name,
	COUNT(DISTINCT p.product_id) number_of_products
FROM categories c
JOIN products p ON c.category_id = p.category_id
GROUP BY c.category_name
ORDER BY number_of_products DESC;

-- 13. How does the stock distribution vary across different stores?
SELECT st.store_name,
	p.product_name,
    s.quantity
FROM stores st
JOIN stocks s ON st.store_id = s.store_id
JOIN products p ON s.product_id = p.product_id
ORDER BY st.store_name, p.product_name;

-- 14. Which store has generated the highest revenue?
SELECT st.store_name,
	SUM(oi.quantity * oi.list_price *(1-oi.discount)) AS total_revenue
FROM stores st
JOIN orders o ON st.store_id = o.store_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY store_name
ORDER by total_revenue DESC;

-- 15. Which staff member has processed the most orders?
SELECT CONCAT(staffs.first_name,' ',staffs.last_name) AS staff_name,
	COUNT(DISTINCT o.order_id) AS number_of_orders
FROM staffs
JOIN orders o ON staffs.staff_id = o.staff_id
GROUP BY staff_name
ORDER BY number_of_orders DESC;

-- 16. Are there any stores with significantly lower sales than others?
SELECT stores.store_name,
	SUM(oi.quantity) AS number_of_sales
FROM stores
JOIN orders o ON stores.store_id = o.store_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY store_name
ORDER BY number_of_sales ASC;

-- 17. What are the busiest sales days or months for each store?
